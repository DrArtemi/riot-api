# generated by datamodel-codegen:
#   filename:  test.json
#   timestamp: 2022-05-09T22:29:41+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field


class Ban(BaseModel):
    championId: int
    pickTurn: int


class Team(BaseModel):
    teamId: int
    win: str
    firstBlood: bool
    firstTower: bool
    firstInhibitor: bool
    firstBaron: bool
    firstDragon: bool
    firstRiftHerald: bool
    towerKills: int
    inhibitorKills: int
    baronKills: int
    dragonKills: int
    vilemawKills: int
    riftHeraldKills: int
    dominionVictoryScore: int
    bans: List[Ban]


class Stats(BaseModel):
    participantId: int
    win: bool
    item0: int
    item1: int
    item2: int
    item3: int
    item4: int
    item5: int
    item6: int
    kills: int
    deaths: int
    assists: int
    largestKillingSpree: int
    largestMultiKill: int
    killingSprees: int
    longestTimeSpentLiving: int
    doubleKills: int
    tripleKills: int
    quadraKills: int
    pentaKills: int
    unrealKills: int
    totalDamageDealt: int
    magicDamageDealt: int
    physicalDamageDealt: int
    trueDamageDealt: int
    largestCriticalStrike: int
    totalDamageDealtToChampions: int
    magicDamageDealtToChampions: int
    physicalDamageDealtToChampions: int
    trueDamageDealtToChampions: int
    totalHeal: int
    totalUnitsHealed: int
    damageSelfMitigated: int
    damageDealtToObjectives: int
    damageDealtToTurrets: int
    visionScore: int
    timeCCingOthers: int
    totalDamageTaken: int
    magicalDamageTaken: int
    physicalDamageTaken: int
    trueDamageTaken: int
    goldEarned: int
    goldSpent: int
    turretKills: int
    inhibitorKills: int
    totalMinionsKilled: int
    neutralMinionsKilled: int
    neutralMinionsKilledTeamJungle: int
    neutralMinionsKilledEnemyJungle: int
    totalTimeCrowdControlDealt: int
    champLevel: int
    visionWardsBoughtInGame: int
    sightWardsBoughtInGame: int
    wardsPlaced: int
    wardsKilled: int
    firstBloodKill: bool
    firstBloodAssist: bool
    firstTowerKill: bool
    firstTowerAssist: bool
    firstInhibitorKill: bool
    firstInhibitorAssist: bool
    combatPlayerScore: int
    objectivePlayerScore: int
    totalPlayerScore: int
    totalScoreRank: int
    playerScore0: int
    playerScore1: int
    playerScore2: int
    playerScore3: int
    playerScore4: int
    playerScore5: int
    playerScore6: int
    playerScore7: int
    playerScore8: int
    playerScore9: int
    perk0: int
    perk0Var1: int
    perk0Var2: int
    perk0Var3: int
    perk1: int
    perk1Var1: int
    perk1Var2: int
    perk1Var3: int
    perk2: int
    perk2Var1: int
    perk2Var2: int
    perk2Var3: int
    perk3: int
    perk3Var1: int
    perk3Var2: int
    perk3Var3: int
    perk4: int
    perk4Var1: int
    perk4Var2: int
    perk4Var3: int
    perk5: int
    perk5Var1: int
    perk5Var2: int
    perk5Var3: int
    perkPrimaryStyle: int
    perkSubStyle: int
    statPerk0: int
    statPerk1: int
    statPerk2: int


class CreepsPerMinDeltas(BaseModel):
    field_10_20: float = Field(..., alias='10-20')
    field_0_10: float = Field(..., alias='0-10')
    field_20_30: float = Field(..., alias='20-30')


class XpPerMinDeltas(BaseModel):
    field_10_20: float = Field(..., alias='10-20')
    field_0_10: float = Field(..., alias='0-10')
    field_20_30: float = Field(..., alias='20-30')


class GoldPerMinDeltas(BaseModel):
    field_10_20: float = Field(..., alias='10-20')
    field_0_10: float = Field(..., alias='0-10')
    field_20_30: float = Field(..., alias='20-30')


class DamageTakenPerMinDeltas(BaseModel):
    field_10_20: float = Field(..., alias='10-20')
    field_0_10: float = Field(..., alias='0-10')
    field_20_30: float = Field(..., alias='20-30')


class Timeline(BaseModel):
    participantId: int
    creepsPerMinDeltas: CreepsPerMinDeltas
    xpPerMinDeltas: XpPerMinDeltas
    goldPerMinDeltas: GoldPerMinDeltas
    damageTakenPerMinDeltas: DamageTakenPerMinDeltas
    role: str
    lane: str


class Participant(BaseModel):
    participantId: int
    teamId: int
    championId: int
    spell1Id: int
    spell2Id: int
    stats: Stats
    timeline: Timeline


class Player(BaseModel):
    summonerName: str
    profileIcon: int


class ParticipantIdentity(BaseModel):
    participantId: int
    player: Player


class GameDetails(BaseModel):
    gameId: int
    platformId: str
    gameCreation: int
    gameDuration: int
    queueId: int
    mapId: int
    seasonId: int
    gameVersion: str
    gameMode: str
    gameType: str
    teams: List[Team]
    participants: List[Participant]
    participantIdentities: List[ParticipantIdentity]
