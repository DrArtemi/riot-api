# generated by datamodel-codegen:
#   filename:  test.json
#   timestamp: 2022-05-09T22:29:41+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field
from pyrsistent import v
from lolesport_parser.dataclasses.game_details_v5 import GameDetails as GameDetailsV5


class Ban(BaseModel):
    championId: int
    pickTurn: int


class Team(BaseModel):
    teamId: int
    win: str
    firstBlood: bool
    firstTower: bool
    firstInhibitor: bool
    firstBaron: bool
    firstDragon: bool
    firstRiftHerald: bool
    towerKills: int
    inhibitorKills: int
    baronKills: int
    dragonKills: int
    vilemawKills: int
    riftHeraldKills: int
    dominionVictoryScore: int
    bans: List[Ban]


class Stats(BaseModel):
    participantId: int
    win: bool
    item0: int
    item1: int
    item2: int
    item3: int
    item4: int
    item5: int
    item6: int
    kills: int
    deaths: int
    assists: int
    largestKillingSpree: int
    largestMultiKill: int
    killingSprees: int
    longestTimeSpentLiving: int
    doubleKills: int
    tripleKills: int
    quadraKills: int
    pentaKills: int
    unrealKills: int
    totalDamageDealt: int
    magicDamageDealt: int
    physicalDamageDealt: int
    trueDamageDealt: int
    largestCriticalStrike: int
    totalDamageDealtToChampions: int
    magicDamageDealtToChampions: int
    physicalDamageDealtToChampions: int
    trueDamageDealtToChampions: int
    totalHeal: int
    totalUnitsHealed: int
    damageSelfMitigated: int
    damageDealtToObjectives: int
    damageDealtToTurrets: int
    visionScore: int
    timeCCingOthers: int
    totalDamageTaken: int
    magicalDamageTaken: int
    physicalDamageTaken: int
    trueDamageTaken: int
    goldEarned: int
    goldSpent: int
    turretKills: int
    inhibitorKills: int
    totalMinionsKilled: int
    neutralMinionsKilled: int
    neutralMinionsKilledTeamJungle: int
    neutralMinionsKilledEnemyJungle: int
    totalTimeCrowdControlDealt: int
    champLevel: int
    visionWardsBoughtInGame: int
    sightWardsBoughtInGame: int
    wardsPlaced: int
    wardsKilled: int
    firstBloodKill: bool
    firstBloodAssist: bool
    firstTowerKill: bool
    firstTowerAssist: bool
    firstInhibitorKill: bool
    firstInhibitorAssist: bool
    combatPlayerScore: int
    objectivePlayerScore: int
    totalPlayerScore: int
    totalScoreRank: int
    playerScore0: int
    playerScore1: int
    playerScore2: int
    playerScore3: int
    playerScore4: int
    playerScore5: int
    playerScore6: int
    playerScore7: int
    playerScore8: int
    playerScore9: int
    perk0: int
    perk0Var1: int
    perk0Var2: int
    perk0Var3: int
    perk1: int
    perk1Var1: int
    perk1Var2: int
    perk1Var3: int
    perk2: int
    perk2Var1: int
    perk2Var2: int
    perk2Var3: int
    perk3: int
    perk3Var1: int
    perk3Var2: int
    perk3Var3: int
    perk4: int
    perk4Var1: int
    perk4Var2: int
    perk4Var3: int
    perk5: int
    perk5Var1: int
    perk5Var2: int
    perk5Var3: int
    perkPrimaryStyle: int
    perkSubStyle: int
    statPerk0: int
    statPerk1: int
    statPerk2: int


class CreepsPerMinDeltas(BaseModel):
    field_10_20: float = Field(..., alias='10-20')
    field_0_10: float = Field(..., alias='0-10')
    field_20_30: float = Field(..., alias='20-30')


class XpPerMinDeltas(BaseModel):
    field_10_20: float = Field(..., alias='10-20')
    field_0_10: float = Field(..., alias='0-10')
    field_20_30: float = Field(..., alias='20-30')


class GoldPerMinDeltas(BaseModel):
    field_10_20: float = Field(..., alias='10-20')
    field_0_10: float = Field(..., alias='0-10')
    field_20_30: float = Field(..., alias='20-30')


class DamageTakenPerMinDeltas(BaseModel):
    field_10_20: float = Field(..., alias='10-20')
    field_0_10: float = Field(..., alias='0-10')
    field_20_30: float = Field(..., alias='20-30')


class Timeline(BaseModel):
    participantId: int
    creepsPerMinDeltas: CreepsPerMinDeltas
    xpPerMinDeltas: XpPerMinDeltas
    goldPerMinDeltas: GoldPerMinDeltas
    damageTakenPerMinDeltas: DamageTakenPerMinDeltas
    role: str
    lane: str


class Participant(BaseModel):
    participantId: int
    teamId: int
    championId: int
    spell1Id: int
    spell2Id: int
    stats: Stats
    timeline: Timeline


class Player(BaseModel):
    summonerName: str
    profileIcon: int


class ParticipantIdentity(BaseModel):
    participantId: int
    player: Player


class GameDetails(BaseModel):
    gameId: int
    platformId: str
    gameCreation: int
    gameDuration: int
    queueId: int
    mapId: int
    seasonId: int
    gameVersion: str
    gameMode: str
    gameType: str
    teams: List[Team]
    participants: List[Participant]
    participantIdentities: List[ParticipantIdentity]

    def to_v5(self):
        
        participants = list()
        for i, participant in enumerate(self.participants):
            participants.append({
                "assists": participant.stats.assists,
                "champLevel": participant.stats.champLevel,
                "championId": participant.championId,
                "damageDealtToObjectives": participant.stats.damageDealtToObjectives,
                "damageDealtToTurrets": participant.stats.damageDealtToTurrets,
                "damageSelfMitigated": participant.stats.damageSelfMitigated,
                "deaths": participant.stats.deaths,
                "doubleKills": participant.stats.doubleKills,
                "firstBloodAssist": participant.stats.firstBloodAssist,
                "firstBloodKill": participant.stats.firstBloodKill,
                "firstTowerAssist": participant.stats.firstTowerAssist,
                "firstTowerKill": participant.stats.firstTowerKill,
                "goldEarned": participant.stats.goldEarned,
                "goldSpent": participant.stats.goldSpent,
                "inhibitorKills": participant.stats.inhibitorKills,
                "item0": participant.stats.item0,
                "item1": participant.stats.item1,
                "item2": participant.stats.item2,
                "item3": participant.stats.item3,
                "item4": participant.stats.item4,
                "item5": participant.stats.item5,
                "item6": participant.stats.item6,
                "killingSprees": participant.stats.killingSprees,
                "kills": participant.stats.kills,
                "lane": participant.timeline.lane,
                "largestCriticalStrike": participant.stats.largestCriticalStrike,
                "largestKillingSpree": participant.stats.largestKillingSpree,
                "largestMultiKill": participant.stats.largestMultiKill,
                "longestTimeSpentLiving": participant.stats.longestTimeSpentLiving,
                "magicDamageDealt": participant.stats.magicDamageDealt,
                "magicDamageDealtToChampions": participant.stats.magicDamageDealtToChampions,
                "magicDamageTaken": participant.stats.magicalDamageTaken,
                "neutralMinionsKilled": participant.stats.neutralMinionsKilled,
                "participantId": participant.participantId,
                "pentaKills": participant.stats.pentaKills,
                "physicalDamageDealt": participant.stats.physicalDamageDealt,
                "physicalDamageDealtToChampions": participant.stats.physicalDamageDealtToChampions,
                "physicalDamageTaken": participant.stats.physicalDamageTaken,
                "profileIcon": self.participantIdentities[i].player.profileIcon,
                "quadraKills": participant.stats.quadraKills,
                "role": participant.timeline.role,
                "sightWardsBoughtInGame": participant.stats.sightWardsBoughtInGame,
                "spell1Id": participant.spell1Id,
                "spell2Id": participant.spell2Id,
                "summonerName": self.participantIdentities[i].player.summonerName,
                "teamId": participant.teamId,
                "timeCCingOthers": participant.stats.timeCCingOthers,
                "totalDamageDealt": participant.stats.totalDamageDealt,
                "totalDamageDealtToChampions": participant.stats.totalDamageDealtToChampions,
                "totalDamageTaken": participant.stats.totalDamageTaken,
                "totalHeal": participant.stats.totalHeal,
                "totalMinionsKilled": participant.stats.totalMinionsKilled,
                "totalTimeCCDealt": participant.stats.totalTimeCrowdControlDealt,
                "totalUnitsHealed": participant.stats.totalUnitsHealed,
                "tripleKills": participant.stats.tripleKills,
                "trueDamageDealt": participant.stats.tripleKills,
                "trueDamageDealtToChampions": participant.stats.tripleKills,
                "trueDamageTaken": participant.stats.tripleKills,
                "turretKills": participant.stats.turretKills,
                "unrealKills": participant.stats.unrealKills,
                "visionScore": participant.stats.visionScore,
                "visionWardsBoughtInGame": participant.stats.visionWardsBoughtInGame,
                "wardsKilled": participant.stats.wardsKilled,
                "wardsPlaced": participant.stats.wardsPlaced,
                "win": participant.stats.win,
            })
            
        teams = list()
        for team in self.teams:
            teams.append({
                "teamId": team.teamId,
                "win": team.win == "Win",
                "bans": team.bans,
                "objectives": {
                    "baron": {"first": team.firstBaron, "kills": team.baronKills},
                    "dragon": {"first": team.firstDragon, "kills": team.dragonKills},
                    "inhibitor": {"first": team.firstInhibitor, "kills": team.inhibitorKills},
                    "riftHerald": {"first": team.firstRiftHerald, "kills": team.riftHeraldKills},
                    "tower": {"first": team.firstTower, "kills": team.towerKills}
                }
            })
        
        return GameDetailsV5(
            gameId=self.gameId,
            platformId=self.platformId,
            gameCreation=self.gameCreation,
            gameDuration=self.gameDuration,
            queueId=self.queueId,
            mapId=self.mapId,
            seasonId=self.seasonId,
            gameVersion=self.gameVersion,
            gameMode=self.gameMode,
            gameType=self.gameType,
            participants=participants,
            teams=teams,
        )
